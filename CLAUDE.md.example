# Claude Instructions for the-dev-server MCP

> Copy this file to your project root as `CLAUDE.md` to give Claude automatic instructions.

## 🎯 Mission
**ALWAYS manage dev servers through the-dev-server MCP. Run PM2 lifecycle commands exclusively via these tools.**

## ⚡ Quick Commands

### First time with a project?
```
1. Call: register-managed-process() for each dev service (script, cwd, args, env)
2. Confirm: get-managed-processes()
3. Report back to the user
```

### User says "Start / stop / restart the server"
```
1. Call: start-managed-process() / stop-managed-process() / restart-managed-process()
2. Confirm the PM2 result (online/stopped/etc.)
3. Optionally share get-managed-processes() snapshot
```

### User requests a config change
```
1. Call: update-managed-process({ ...changes, applyToPm2: true })
2. Confirm new settings + restart outcome
```

### User says "Server isn't working"
```
1. Use: diagnose-server prompt (guides status, restart, logs)
2. Tail logs: read-managed-process-logs({ type: "error" })
3. Present findings + recommended next steps
```

### User asks "What's running right now?"
```
1. Call: get-managed-processes()
2. Share registry + PM2 status table
```

## 🚫 DON'T

- ❌ Don't run raw `pm2` commands manually
- ❌ Don't assume a process exists—check the registry
- ❌ Don't edit `.the-dev-server-state.json` by hand
- ❌ Don't forget to reapply config changes through MCP tools

## ✅ DO

- ✅ Register every dev service before attempting to run it
- ✅ Use lifecycle tools (start/stop/restart/delete) for all requests
- ✅ Update configs via update-managed-process (use `applyToPm2` when needed)
- ✅ Tail logs with read-managed-process-logs()
- ✅ Trust get-managed-processes() as the source of truth

## 📋 All Available Tools

1. `get-managed-processes` — Registry + live PM2 snapshot
2. `register-managed-process` — Persist new config (optional auto-start)
3. `update-managed-process` — Change stored config (optional immediate apply)
4. `start-managed-process` — Start via PM2
5. `stop-managed-process` — Stop via PM2
6. `restart-managed-process` — Restart via PM2
7. `delete-managed-process` — Remove from registry (and PM2)
8. `describe-managed-process` — Raw PM2 describe output
9. `read-managed-process-logs` — Tail stdout/err
10. `get-pm2-status` — Global PM2 overview

## 🎓 Example Conversation Flow

```
User: "Start the API and show me the latest logs."

You:
1. Call start-managed-process({ name: "api-service" })
2. Call read-managed-process-logs({ name: "api-service", lines: 50 })
3. Summarize the PM2 response and highlight relevant log lines
```

---

## 📋 For GitHub Copilot

If you're using GitHub Copilot, add this to your `.github/copilot-instructions.md`:

```markdown
## Development Server Management

We use the-dev-server MCP to register and manage all dev servers through PM2.

### When generating code or answering questions about the server:
- Assume the MCP stores configs in `.the-dev-server-state.json` and controls PM2.
- Prefer environment variables for ports and secrets so the MCP can inject them into PM2.
- Mention `register-managed-process` / `update-managed-process` when introducing new scripts.
- Highlight that Claude can start/stop/restart services via MCP tools.

### Example code pattern:
```
// Server port is managed by the-dev-server MCP via PM2
// Default to 3000 but allow override
const PORT = process.env.PORT || 3000;
```
```

---

**Remember: This MCP exists to eliminate PM2 drift and confusion. Use it religiously!** 🎯
